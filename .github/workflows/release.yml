name: "release"
on:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - "*"
    paths:
      - "**"
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  create-or-find-release:
    if: github.event_name == 'workflow_dispatch' || github.actor == 'semantic-release-bot'
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.set-release-id.outputs.result }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Find or create release
        id: set-release-id
        uses: actions/github-script@v7
        with:
          script: |
            const version = `v${process.env.PACKAGE_VERSION}`;
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            let release = releases.find(r => r.tag_name === version);
            if (!release) {
              const { data } = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: version,
                name: version,
                body: '*This release was generated automatically using GitHub Actions.*',
                draft: true,
                prerelease: false
              });
              release = data;
            }
            console.log(`Release ID: ${release.id}`);
            return release.id;

  build-tauri:
    needs: create-or-find-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
#        platform: [windows-latest, macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: v2 -> v2/target

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache-dependency-path: v2/package-lock.json

      - name: Install apt dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install -y --no-install-recommends libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf

      - name: Install bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          API_URL: ${{ secrets.API_URL }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        with:
          releaseId: ${{ needs.create-or-find-release.outputs.release_id }}